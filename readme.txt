Reference: [1]: "Projective Splitting with Forward Steps only Requires Continuity", Patrick R. Johnstone, Jonathan Eckstein, https://arxiv.org/pdf/1809.07180.pdf

Optimization problem (robust fused lasso):

min (1/p)*||Ax - b||_p^p + lambda1*||Dx||_1 + lambda2*||x||_1

where "D" is the linear operator giving the differences between successive 
vector elements.

To run the experiments in [1]:
1. save both robustFusedLasso.py and runRobustFusedLasso.py in the same directory
2. Make sure that the numpy and matplotlib packages are installed in Python
3. Run Python with the input file runRobustFusedLasso.py from that directory. 
 - Eg. in Linux simply issue the command "python runRobustFusedLasso.py" 
4. The experiments are controlled by command-line arguments, the default being
   to to use the parameters for the left panel of Figure 1.  That is, if you
   issue the command

           python runRobustFusedLasso.py

    then the third figure that appears should resemble the left panel of Figure 1.
    Python will pause as each figure is displayed; to continue, simply close the figure
    window.
5.  To produce a plot resembling the middle panel of Figure 1, give the command

           python runRobustFusedLasso.py --power=1.5 --nolegend --cutoff=3050

    Again, the third figure to appear should resemble the middle pane of Figure 1.
6.  To produce a plot resembling the right panel of Figure 1, give the commend

           python runRobustFusedLasso.py --power=1.7 --nolegend --cutoff=3700

There are two Python files.

The script in runFusedLasso.py runs the experiments in [1] using the functions defined in robustFusedLasso.py.  The script is controlled by the following command-line options:

     --dimension=D      Set number of attributes per observation to D; default 2000
     --observations=N   Set number of observations to N; default 1000
     --power=P          Exponent in loss function; default 1.3 and must be > 1
     --cutoff=C         Upper limit of horizontal axis in third chart
     --lambda1=L        Penalty parameter value multiplying ||Dx||_1; default 1.0
     --lambda2=L        Penalty parameter value multiplying ||x||_1; default 1.0
     --nolegend         If specified, suppress display a legend in the third chart

A similar list is generated by giving the command "python runRobustFusedLasso.py --help".  
More parameters can be modified by altering the code.

robustFusedLasso.py defines the following functions:

1.  ps(): projective splitting applied to the robused fused lasso problem. 
2.  backTrack(): internal function of ps() which takes care of backtracking.
3.  subg(): the subgradient method applied to the robust fused lasso problem.
4.  proxSubG(): the proximal subgradient method applied to the robust fused lasso problem.
5.  tseng_pd(): Tseng's method applied to solving the robust fused lasso problem 
    via the monotone+skew primal-dual inclusion.
6.  theBigProx(): Internal function used in tseng_pd(), takes care of computing the 
    resolvent (prox) in the primal-dual space. 
7.  diffOperator(): Difference operator, matrix D, defined in the robust fused lasso problem.
8.  adjointD(): adjoint (transpose) of D.
9.  proxL1(): prox w.r.t. ell_1 norm, aka soft thresholding operator
10. projLInf(): Projection onto the ell_infinity ball




